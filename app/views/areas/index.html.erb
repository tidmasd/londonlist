<div class="container" style="padding-top:50px;">
  <div class="filters">
      <div class="row">
            <div class="col-sm-4">
              <div class="btn-group btn-group-lg filter-button-group" data-filter-group="zone" role="group">
                <button class="btn btn-filter button" data-filter=".zoneone" style="display:inline;">Zone 1</button>
                <button class="btn btn-filter button" data-filter=".zonetwo" style="display:inline;">Zone 2</button>
                <button class="btn btn-filter button" data-filter=".zonethree" style="display:inline;">Zone 3</button>
              </div>
            </div>
            <div class="col-sm-4">
              <div class="btn-group btn-group-lg filter-button-group" data-filter-group="cost" role="group" aria-label="Basic example">
                <button class="btn btn-filter button" data-filter=".cheap" style="display:inline;">Cheap</button>
                <button class="btn btn-filter button" data-filter=".affordable" style="display:inline;">Affordable</button>
                <button class="btn btn-filter button" data-filter=".expensive" style="display:inline;">Expensive</button>
              </div>
            </div>
            <div class="col-sm-4">
              <div class="btn-group btn-group-lg filter-button-group" data-filter-group="type" role="group" aria-label="Basic example">
                <button class="btn btn-filter button" data-filter=".safe" style="display:inline;">Safe Area</button>
                <button class="btn btn-filter button" data-filter=".nightlife" style="display:inline;">Good Nightlife</button>
                <button class="btn btn-filter button" data-filter=".green" style="display:inline;">Green Spaces</button>
              </div>
            </div>
      </div>
    </br>
      <div class="row">
            <div class="col-sm-4">
              <div class="btn-group btn-group-lg filter-button-group" data-filter-group="type" role="group" aria-label="Basic example">
                <button class="btn btn-filter button" data-filter=".safe" style="display:inline;">North</button>
                <button class="btn btn-filter button" data-filter=".nightlife" style="display:inline;">South</button>
              </div>
            </div>
      </div>
  </br>
  </div>
      </br>
      </br>
      <div class="row grid">
          
          <% @areas.each do |area| %>
              <div class="col-md-4 col-sm-12 grid-item <%= area.cost >= 900 ? 'expensive' : ' ' %><%= area.cost <= 600 ? 'cheap' : ' ' %> <%= area.green >= 7 ? 'green' : ' ' %> <%= area.nightlife >= 7 ? 'nightlife' : ' ' %> <%= area.zone === 1 ? 'zoneone' : ' ' %> <%= area.zone === 2 ? 'zonetwo' : ' ' %> <%= area.zone === 3 ? 'zonethree' : ' ' %> <%= area.category.crime >= 7 ? 'safe' : ' ' %>">
                    <%= link_to area do %>
                    <div class="area-tile" id="diva_id" style="background: linear-gradient(rgba(0, 0, 0, 0.55), rgba(0, 0, 0, 0.55)),rgba(0,0,0,0.55) url('<%= area.image.url %>') no-repeat center;background-size:cover;">
                      <div class="area-inside">
                          <div class="attr top-left">Zone <%= area.zone %></div>
                          <div class="attr top-right">Â£<%= area.cost %> / m</div>
                          <div class="attr area-title"><span class="title"><%= area.name %></span></br><span class="sub-title"><%= area.category.name %></span></div>
                      </div>
                    </div>
                    <% end %>
                </div>              
          <% end %>
      </div>

    <% if current_user.try(:admin?) %>
        <%= link_to 'New Area', new_area_path %>
    <% else %>
    <% end %>
</div>


  
<script type="text/javascript">

// init Isotope
var $grid = $('.grid').isotope({
  itemSelector: '.grid-item'
});

// store filter for each group
var filters = {};

$('.filters').on( 'click', '.button', function() {
  var $this = $(this);
  // get group key
  var $buttonGroup = $this.parents('.btn-group');
  var filterGroup = $buttonGroup.attr('data-filter-group');
  // set filter for group
  filters[ filterGroup ] = $this.attr('data-filter');
  // combine filters
  var filterValue = concatValues( filters );
  // set filter for Isotope
  $grid.isotope({ filter: filterValue });
  // console.log(filterValue);
  console.log( filters );
});


$('.btn-group').each( function( i, buttonGroup ) {
  var $buttonGroup = $( buttonGroup );
  $buttonGroup.on( 'click', 'button', function() {
    $buttonGroup.find('.is-checked').removeClass('is-checked');
    $( this ).addClass('is-checked');
  });
});



// flatten object by concatting values
function concatValues( obj ) {
  var value = '';
  for ( var prop in obj ) {
    value += obj[ prop ];
  }
  return value;
}


// function addCat() {
//   var cat = document.getElementById("category1").value;

//   var url = document.location.href;

//   document.location.href = url + "?category=" + cat;
// }
  
// </script>



// <script>
//       var url = document.location.href;
      
//       function updateUrl(value){
//         //get the info we need
//         var current_url = url;
//         var has_qs = current_url.indexOf('?') != -1;
        
//         if (has_qs){
//           var qs_place = current_url.indexOf('?')
//           var url_start = current_url.split("").splice(0, qs_place).join("");
//           var q_string = current_url.split("").splice(qs_place + 1, current_url.split("").length);
//           var adding = current_url.indexOf(value) == -1;
          
//           if (adding){
//             q_string = q_string.join("") + "&" + value;
//             url = url_start + "?" + q_string;
//           }
//           else{
//             //check if its the only thing in the qs
//             if (value.split("").length == q_string.length){
//               url = url_start;
//             }
//             else{
//               var v_place = q_string.join("").indexOf(value);
//               if (v_place == 0){
//                 q_string = q_string.splice(value.split("").length + 1, q_string.length);
//                 url = url_start + "?" + q_string.join("");
//               }
//               else{
//                 var q_string_start = q_string.splice(0, v_place - 1).join("");
//                 var q_string_end = q_string.splice(value.length + 1, q_string.length - value.length + 1).join("");
//                 url = url_start + "?" + q_string_start + q_string_end;
//               }
//             }
//           }
//         }
//         else{
//           url = current_url + "?" + value;
//         }
        
//         document.location = url;
//         console.log(url);
//       }
      
//       var pathArray1 = document.location.href.split('?');
//       var pathArray2 = pathArray1[1].split('&');
//       // console.log(pathArray);
//       // console.log(pathArray2);
//       for (i in pathArray2) {
//         // console.log(pathArray2[i]);
//         var selector = pathArray2[i];
//         // console.log(selector);
//         var element = document.getElementById(selector);
//         // console.log(element);
//         element.className = "btn btn-filteron active";
//       }
//     </script>